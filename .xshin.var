#!/data/data/com.termux/files/usr/bin/env bash

# Variable Color
df="\e[39m"
wh="\e[97m"
rd="\e[31m"
gn="\e[32m"
yw="\e[33m"
bl="\e[34m"
mg="\e[35m"
cyn="\e[36m"
lgy="\e[37m"
dgy="\e[90m"
lrd="\e[91m"
lgn="\e[92m"
lyw="\e[93m"
lbl="\e[94m"
lmg="\e[95m"
lcyn="\e[96m"

DIR=`cd $(dirname $0); pwd`

banner() {

    echo -e "\n$bl╭────────────────────────────────────────────────────────╮"
    echo -e "║              $df$lrd _______$bl                                  ║"
    echo -e "║              $df$lrd(_______)$bl                                 ║"
    echo -e "║     $df$wh ____  _   _$lrd _\e[97m _____  ____ ____  _   _ _   _$bl       ║"
    echo -e "║     $df$wh|    \| | | $lrd| |\e[97m ___ |/ ___)    \| | | ( \ / )$bl      ║"
    echo -e "║     $df$wh| | | | |_| $lrd| |\e[97m ____| |   | | | | |_| |) X ($bl       ║"
    echo -e "║     $df$wh|_|_|_|\__  $lrd|_|\e[97m_____)_|   |_|_|_|____/(_/ \_)$bl      ║"
    echo -e "║           $df$wh(____/$bl                                       ║"
    echo -e "║                                                        ║"
    echo -e "║             🚀$wh Version         :$lyw 0.4.0 $bl                ║"
    echo -e "║             📅$wh Build Date      :$lrd 18 March 2021 $bl        ║"
    echo -e "║             📦$wh Repository Size :$lgn $repoSize $bl             ║"
    echo -e "║             ⚙️ $wh Maintainer      :$mg xShin$df$bl                 ║"
    echo -e "║                                                        ║"
    echo -e "╰────────────────────────────────────────────────────────╯$df"
    echo -e "              ⚠️ $wh Mode            :$lgn $mode\n$df"

}

function reposize() {
    if [ "$#" -eq 2 ]; then
        echo "$(echo "scale=2
        $(curl https://api.github.com/repos/$1/$2 2>/dev/null | grep size | head -1 | tr -dc '[:digit:]') / 1024" | bc) MB"
    fi
}
repoSize=`reposize xshin404 myTermux`

# Backups
backups=( 
    ".termux"  
    ".config"
    ".scripts"
    ".oh-my-zsh"
    ".zshrc"
)

backup() {

    echo -e "⚙️ Backup dotfiles"

    for backup in "${backups[@]}"; do

        start_spinner_backup "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $backup"
        sleep 2

        if [[ -f $HOME/$backup || -d $HOME/$backup ]]; then

            mv -u ${HOME}/${backup}{,.$(date +%Y.%m.%d-%H.%M.%S)};
            stop_spinner_backup $?
            echo -e " ‎‏‏‎ ⚠️ backup to $backup.$(date +%Y.%m.%d-%H.%M.%S)\n"

        else

            sleep 2
            cp "empty" > /dev/null 2>&1
            stop_spinner_backup $?

        fi

    done

}

# Lightweight Installation
lightweightpkgs=(

    "git"
    "curl"
    "zsh"
    "neofetch"
    "exa"
    "lf"
    "bat"
    "mpd" 
    "ncmpcpp"
    "neovim"

)

lightweightpackage() {

    echo -e "\n⚙️ Installing lightweight package"

    for lightweightpkg in "${lightweightpkgs[@]}"; do

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $lightweightpkg"
        pkg install -y $lightweightpkg &>/dev/null

        check() {

            ipkg=$(pkg list-installed $lightweightpkg 2> /dev/null | tail -n 1)
            cpkg=${ipkg%/*}

            if [[ $cpkg == $lightweightpkg ]]; then

                stop_spinner $? || exit 1;

            else

                sleep 2
                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‎‎‏‏‎‏‏‎‏‏‎ ‎‏‏‎ ‎📦 ‎$lightweightpkg (retrying) ‎‏‏‎ "
                pkg install -y $lightweightpkg &>/dev/null
                check
            
            fi

        }

        check

    done

    echo -e ""
    cp -R $DIR/.scripts $HOME/.scripts &>/dev/null
    
    if [[ -f $HOME/.scripts/list-packages.sh ]]; then
    
        bash $HOME/.scripts/list-packages.sh table lightweight
    
    fi

}

# Full Installation
fullpkgs=(

    "git"
    "curl"
    "zsh"
    "neofetch"
    "exa"
    "lf"
    "bat"
    "mpd" 
    "ncmpcpp"
    "neovim"
    "nodejs"

)

fullpackage() {

    echo -e "\n⚙️ Installing full package"

    for fullpkg in "${fullpkgs[@]}"; do

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $fullpkg"
        pkg install -y $fullpkg &>/dev/null

        check() {

            ipkg=$(pkg list-installed $fullpkg 2> /dev/null | tail -n 1)
            cpkg=${ipkg%/*}

            if [[ $cpkg == $fullpkg ]]; then

                stop_spinner $? || exit 1;
                        
            else

                sleep 2
                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‎‎‏‏‎‏‏‎‏‏‎ ‎‏‏‎ ‎📦 ‎$fullpkg (retrying) ‎‏‏‎ "
                pkg install -y $fullpkg &>/dev/null
                check

            fi

        }

        check

    done

    echo -e ""
    cp -R $DIR/.scripts $HOME/.scripts &>/dev/null

    if [[ -f $HOME/.scripts/list-packages.sh ]]; then

        bash $HOME/.scripts/list-packages.sh table full

    fi

}

zshrepo() {

    echo -e "\n⚙️ Installing oh-my-zsh"

    ohmyzsh() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 oh-my-zsh"
        git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh/ &>/dev/null
    
        check() {

            if [[ -d $HOME/.oh-my-zsh ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 oh-my-zsh (retrying)"
                git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh/ &>/dev/null
                check

            fi

        }

        check

    }

    ohmyzsh

    echo -e "\n⚙️ Installing plugin oh-my-zsh"

    highlighting() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-syntax-highlighting"
        git clone git://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting &>/dev/null

        check() {

            if [[ -d $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-syntax-highlighting (retrying)"
                git clone git://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting &>/dev/null
                check

            fi

        }

        check

    }

    highlighting

    autosuggest() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-autosuggestions"
        git clone git://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions &>/dev/null

        check() {

            if [[ -d $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-autosuggestions (retrying)"
                git clone git://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions &>/dev/null
                check

            fi

        }

        check

    }

    autosuggest

}

shell() {

    echo -e "\n⚙️ Setting SHELL default"

        zsh() {

            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 change shell to zsh"
            sleep 2

            check() {

                if [[ $(which zsh) == "/data/data/com.termux/files/usr/bin/zsh" ]]; then

                    chsh -s zsh
                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?

                fi

            }

            check

        }

    zsh

}

# ZSH Themes
owl4cethemes=(

    "rounded.zsh-theme"
    "ar-round.zsh-theme"
    "la-round.zsh-theme"

)

owl4cezsh() {

    echo -e "\n⚙️ Installing ZSH Theme"

    for owl4cetheme in "${owl4cethemes[@]}"; do

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $owl4cetheme"
        sleep 2
        cp $DIR/.oh-my-zsh/custom/themes/$owl4cetheme $HOME/.oh-my-zsh/custom/themes/$owl4cetheme

        check() {

            if [[ -f $HOME/.oh-my-zsh/custom/themes/$owl4cetheme ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?

            fi

        }

        check

    done

}

# Dotfiles
vardotfiles=(

    ".zshrc"
    ".termux"
    ".config"
    ".color-toys"

)
dotfiles() {

    echo -e "\n⚙️ Installing dotfiles"

    for dotfile in "${vardotfiles[@]}"; do

        if [[ "$dotfile" == ".zshrc" ]]; then
            
            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile"
            sleep 2
            cp $DIR/$dotfile $HOME/$dotfile

            check() {

                if [[ -f $HOME/$dotfile ]]; then

                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?
                    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile (retrying)"
                    sleep 2
                    cp $DIR/$dotfile $HOME/$dotfile
                    check

                fi

            }

            check

        elif [[ "$dotfile" == ".termux" ]]; then
        
            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile"

            sleep 2
            cp -R $DIR/$dotfile $HOME/$dotfile

            check() {

                if [[ -d $HOME/$dotifle ]]; then

                    termux-reload-settings
                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?
                    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile (retrying)"
                    sleep 2
                    cp -R $DIR/$dotfile $HOME/$dotfile
                    check

                fi

            }

            check
        
        else

            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .$dotfile"
            sleep 2
            cp -R $DIR/$dotfile $HOME/$dotfile

            check() {

                if [[ -d $HOME/$dotfile ]]; then

                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?
                    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .$dotfile (retrying)"
                    sleep 2
                    cp -R $DIR/$dotfile $HOME/$dotfile
                    check

                fi

            }

            check

        fi

    done


    # termux() {

    #     start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .termux"
    #     sleep 2
    #     cp -R $DIR/.termux $HOME/.termux

    #     check() {

    #         if [[ -d $HOME/.termux ]]; then

    #             termux-reload-settings
    #             stop_spinner $?

    #         else

    #             cp "empty" > /dev/null 2>&1
    #             stop_spinner $?
    #             start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .termux (retrying)"
    #             sleep 2
    #             cp -R $DIR/.termux $HOME/.termux
    #             check

    #         fi

    #     }

    #     check

    # }

    # termux

    # config() {

    #     start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .config"
    #     sleep 2
    #     cp -R $DIR/.config $HOME/.config

    #     check() {

    #         if [[ -d $HOME/.config ]]; then

    #             cp $DIR/fix/mpd/run $PREFIX/var/service/mpd/run &>/dev/null
    #             stop_spinner $?
                        
    #         else

    #             cp "empty" > /dev/null 2>&1
    #             stop_spinner $?
    #             start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .config (retrying)"
    #             sleep 2
    #             cp -R $DIR/.config $HOME/.config
    #             check

    #         fi

    #     }

    #     check

    # }

    # config

    # colortoys() {

    #     start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .color-toys"
    #     sleep 2
    #     cp -R $DIR/.color-toys $HOME/.color-toys

    #     check() {

    #         if [[ -d $HOME/.color-toys ]]; then

    #             stop_spinner $?
                        
    #         else

    #             cp "empty" > /dev/null 2>&1
    #             stop_spinner $?
    #             start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 .config (retrying)"
    #             sleep 2
    #             cp -R $DIR/.color-toys $HOME/.color-toys
    #             check

    #         fi

    #     }

    #     check

    # }

    # colortoys

}

neovimplug() {

    echo -e "\n⚙️ Installing neovim plugins"

    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 coc.vim & etc"
    sleep 2

    (
        set -e
        nvim --headless +PlugInstall +qall > /dev/null 2>&1
    )

    if [ $? -eq 0 ]; then

        stop_spinner $?

    else

        sleep 2
        cp "empty" > /dev/null 2>&1
        stop_spinner $?

    fi

}

permission() {

    termux-setup-storage

}