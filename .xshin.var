#!/data/data/com.termux/files/usr/bin/env bash

# Author : xShin
# GitHub : https://github.com/xshin404

# Variable Color

df="\e[39m"
wh="\e[97m"
rd="\e[31m"
gn="\e[32m"
yw="\e[33m"
bl="\e[34m"
mg="\e[35m"
cyn="\e[36m"
lgy="\e[37m"
dgy="\e[90m"
lrd="\e[91m"
lgn="\e[92m"
lyw="\e[93m"
lbl="\e[94m"
lmg="\e[95m"
lcyn="\e[96m"

DIR=`cd $(dirname $0); pwd`

function banner() {

    echo -e "\n$bl╭────────────────────────────────────────────────────────╮"
    echo -e "║              $df$lrd _______$bl                                  ║"
    echo -e "║              $df$lrd(_______)$bl                                 ║"
    echo -e "║     $df$wh ____  _   _$lrd _\e[97m _____  ____ ____  _   _ _   _$bl       ║"
    echo -e "║     $df$wh|    \| | | $lrd| |\e[97m ___ |/ ___)    \| | | ( \ / )$bl      ║"
    echo -e "║     $df$wh| | | | |_| $lrd| |\e[97m ____| |   | | | | |_| |) X ($bl       ║"
    echo -e "║     $df$wh|_|_|_|\__  $lrd|_|\e[97m_____)_|   |_|_|_|____/(_/ \_)$bl      ║"
    echo -e "║           $df$wh(____/$bl                                       ║"
    echo -e "║                                                        ║"
    echo -e "║             🚀$wh Version         :$lyw 0.4.3 pre $bl            ║"
    echo -e "║             📅$wh Build Date      :$lrd 09 April 2021 $bl        ║"
    echo -e "║             📦$wh Repository Size :$lgn $repoSize $bl             ║"
    echo -e "║             ⚙️ $wh Maintainer      :$mg xShin$df$bl                 ║"
    echo -e "║                                                        ║"
    echo -e "╰────────────────────────────────────────────────────────╯$df"
    echo -e "              ⚠️ $wh Mode            :$lgn $mode\n$df"

}

function reposize() {

    if [ "$#" -eq 2 ]; then

        echo "$(echo "scale=2

        $(curl https://api.github.com/repos/$1/$2 2>/dev/null | grep size | head -1 | tr -dc '[:digit:]') / 1024" | bc) MB"

    fi

}

repoSize=`reposize xshin404 myTermux`

# Backups
backups=( 

    ".termux"  
    ".config"
    ".scripts"
    ".oh-my-zsh"
    ".zshrc"
    ".tmux.conf"
    ".tmux-themepack"

)

# Dotfiles
vardotfiles=(

    ".config"
    ".color-toys"
    ".tmux.conf"
    ".termux"

)

function backup() {

    echo -e "⚙️ Backup dotfiles"

    for backup in "${backups[@]}"; do

        start_spinner_backup "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $backup"
        sleep 2

        if [[ -f $HOME/$backup || -d $HOME/$backup ]]; then

            mv -u ${HOME}/${backup}{,.$(date +%Y.%m.%d-%H.%M.%S)};
            stop_spinner_backup $?
            echo -e " ‎‏‏‎ ⚠️ backup to $backup.$(date +%Y.%m.%d-%H.%M.%S)\n"

        else

            sleep 2
            cp "empty" > /dev/null 2>&1
            stop_spinner_backup $?

        fi

    done

}

function dotfiles() {

    echo -e "\n⚙️ Installing dotfiles"

    function file() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile"
        sleep 2
        cp $DIR/$dotfile $HOME/$dotfile

        function check() {

            if [[ -f $HOME/$dotfile ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile (retrying)"
                sleep 2
                cp $DIR/$dotfile $HOME/$dotfile
                check

            fi

        }

        check

    }

    function directory() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile"
        sleep 2
        cp -R $DIR/$dotfile $HOME/$dotfile

        function check() {

            if [[ -d $HOME/$dotfile ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $dotfile (retrying)"
                sleep 2
                cp -R $DIR/$dotfile $HOME/$dotfile
                check

            fi

        }

        check
        
    }

    for dotfile in "${vardotfiles[@]}"; do

        if [[ "$dotfile" == ".zshrc" ]]; then
            
            file

        elif [[ "$dotfile" == ".tmux.conf" ]]; then

            file
        
        else

            directory
            termux-reload-settings

        fi

    done

}

function tmuxtheme() {

    echo -e "\n⚙️ Installing tmux-theme\n"

    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 tmux-themepack"
    git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack/ &>/dev/null
    
    function check() {

        if [[ -d ~/.tmux-themepack ]]; then

            stop_spinner $?

        else

            cp "empty" > /dev/null 2>&1
            stop_spinner $?
            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 tmux-themepack"
            git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack/ &>/dev/null
            check

        fi

    }

    check

}

# Lightweight Installation
lightweightpkgs=(

    "git"
    "curl"
    "zsh"
    "neofetch"
    "exa"
    "lf"
    "bat"
    "tmux"
    "mpd" 
    "ncmpcpp"
    "cava"
    "neovim"
    "imagemagick"

)

function lightweightpackage() {

    echo -e "\n⚙️ Installing lightweight package\n"

    cp -R $DIR/.scripts $HOME/.scripts &>/dev/null

    if [[ -f $HOME/.scripts/list-packages.sh ]]; then

        bash $HOME/.scripts/list-packages.sh table lightweight

    fi

    echo ""

    read -p "  Would you like to install all? [Y/n] " Ask

    case "$Ask" in

        y|Y ) 

            echo ""

            for lightweightpkg in "${lightweightpkgs[@]}"; do

                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $lightweightpkg"
                pkg install -y $lightweightpkg &>/dev/null

                function check() {

                    ipkg=$(pkg list-installed $lightweightpkg 2> /dev/null | tail -n 1)
                    cpkg=${ipkg%/*}

                    if [[ $cpkg == $lightweightpkg ]]; then

                        stop_spinner $? || exit 1;

                    else

                        sleep 2
                        cp "empty" > /dev/null 2>&1
                        stop_spinner $?
                        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $lightweightpkg (retrying)"
                        pkg install -y $lightweightpkg &>/dev/null
                        check
                    
                    fi

                }

                check

            done ;;

        n|N ) 
        
            exit 1 ;;

        * )

          echo -e "Abort."
          exit 1 ;;

    esac

}

# Full Installation
fullpkgs=(

    "git"
    "curl"
    "zsh"
    "neofetch"
    "exa"
    "lf"
    "bat"
    "tmux"
    "mpd"
    "ncmpcpp"
    "cava"
    "neovim"
    "imagemagick"

)

function fullpackage() {

    echo -e "\n⚙️ Installing full package\n"

    cp -R $DIR/.scripts $HOME/.scripts &>/dev/null

    if [[ -f $HOME/.scripts/list-packages.sh ]]; then

        bash $HOME/.scripts/list-packages.sh table full

    fi

    echo ""

    read -p "  Would you like to install all? [Y/n] " Ask

    case "$Ask" in

        y|Y ) 

            echo ""
            
            for fullpkg in "${fullpkgs[@]}"; do

                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $fullpkg"
                pkg install -y $fullpkg &>/dev/null

                function check() {

                    ipkg=$(pkg list-installed $fullpkg 2> /dev/null | tail -n 1)
                    cpkg=${ipkg%/*}

                    if [[ $cpkg == $fullpkg ]]; then

                        stop_spinner $? || exit 1;
                                
                    else

                        sleep 2
                        cp "empty" > /dev/null 2>&1
                        stop_spinner $?
                        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $fullpkg (retrying)"
                        pkg install -y $fullpkg &>/dev/null
                        check

                    fi

                }

                check

            done ;;

        n|N ) 
        
            exit 1 ;;

        * )

          echo -e "Abort."
          exit 1 ;;

    esac

}

function zshrepo() {

    echo -e "\n⚙️ Installing oh-my-zsh"

    function ohmyzsh() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 oh-my-zsh"
        git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh/ &>/dev/null
    
        function check() {

            if [[ -d $HOME/.oh-my-zsh ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 oh-my-zsh (retrying)"
                git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh/ &>/dev/null
                check

            fi

        }

        check

    }

    ohmyzsh

    echo -e "\n⚙️ Installing plugin oh-my-zsh"

    function highlighting() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-syntax-highlighting"
        git clone git://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting &>/dev/null

        function check() {

            if [[ -d $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-syntax-highlighting (retrying)"
                git clone git://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting &>/dev/null
                check

            fi

        }

        check

    }

    highlighting

    function autosuggest() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-autosuggestions"
        git clone git://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions &>/dev/null

        function check() {

            if [[ -d $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]]; then

                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?
                start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 zsh-autosuggestions (retrying)"
                git clone git://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions &>/dev/null
                check

            fi

        }

        check

    }

    autosuggest

}

function shell() {

    echo -e "\n⚙️ Setting SHELL default"

        function zsh() {

            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 change shell to zsh"
            sleep 2

            function check() {

                if [[ $(which zsh) == "/data/data/com.termux/files/usr/bin/zsh" ]]; then

                    chsh -s zsh
                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?

                fi

            }

            check

        }

    zsh

}

# ZSH Themes

function zshtheme() {

    echo -e "\n⚙️ Installing ZSH Theme"

    function owl4cethemes() {

        owl4cethemes=(

            "rounded.zsh-theme"
            "ar-round.zsh-theme"
            "la-round.zsh-theme"

        )

        for owl4cetheme in "${owl4cethemes[@]}"; do

            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 $owl4cetheme"
            sleep 2
            cp $DIR/.oh-my-zsh/custom/themes/$owl4cetheme $HOME/.oh-my-zsh/custom/themes/$owl4cetheme

            function check() {

                if [[ -f $HOME/.oh-my-zsh/custom/themes/$owl4cetheme ]]; then

                    stop_spinner $?

                else

                    cp "empty" > /dev/null 2>&1
                    stop_spinner $?

                fi

            }

            check

        done

        cp $DIR/.zshrc $HOME
        sed -i 's/ZSH_THEME=""/ZSH_THEME="rounded-custom"/g' ~/.zshrc

    }

    function powerlevel10k() {

        start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 powerlevel10k"
        sleep 2
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k &>/dev/null

        function check() {

            if [[ -d $HOME/.oh-my-zsh/custom/themes/powerlevel10k ]]; then

                cp $DIR/.zshrc $HOME
                sed -i 's/ZSH_THEME=""/ZSH_THEME="powerlevel10k\/powerlevel10k"/g' ~/.zshrc
                cp $DIR/.p10k.zsh ~/
                stop_spinner $?

            else

                cp "empty" > /dev/null 2>&1
                stop_spinner $?

            fi

        }

        check

    }


    echo -e "\n  [1] owl4ce"
    echo -e "  [2] powerlevel10k\n"
    read -p "  Choose Theme : " Theme

    case $Theme in
        1 ) echo "" && owl4cethemes ;;
        2 ) echo "" && powerlevel10k ;;
        * ) echo -e $lrd"\nPlease enter the right number!\n$df" && zshtheme ;;
    esac

}


function neovimplug() {

    echo -e "\n⚙️ Installing neovim plugins"

    start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 packer plugin"
    sleep 2

    git clone https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim &>/dev/null
    
    function check() {

        if [[ -f ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]]; then

            stop_spinner $?

        else

            cp "empty" > /dev/null 2>&1
            stop_spinner $?
            start_spinner "‏‏‎‏‏‎ ‎‏‏‎ ‎📦 packer plugin"
            git clone https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim &>/dev/null
            check

        fi

    }

    check

    if [ $? -eq 0 ]; then

        stop_spinner $?

    else

        sleep 2
        cp "empty" > /dev/null 2>&1
        stop_spinner $?

    fi

}

function permission() {

    termux-setup-storage

}

function welcome() {

    if [[ -f $PREFIX/etc/motd ]]; then

        mv $PREFIX/etc/motd $HOME/motd.$(date +%Y.%m.%d-%H.%M.%S)

    fi

}

function finish() {

    echo -e "\n‏‏‎‏‏‎ ‎‏‏‎ ⚠️ Message :"
    echo -e "      - ZSH not apply (Need restart)"
    echo -e "      - Termux Properties size (Need restart to fix the size)"
    echo -e ""
    echo -e "‏‏‎‏‏‎ ‎‏‏‎ ⚠️ Known Installation Bug :"

    echo -e "      - Colorscheme not automatic changed (Need run by manual)"
    echo -e "        with 'cp -R .termux ~/ && termux-reload-settings'\n"

}
