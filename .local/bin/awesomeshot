#!/usr/bin/env bash

LIBRARY_PATH="${HOME}/.scripts/library"

LIBRARYS=(
  signal cursor colors stat
)

for LIBRARY in ${LIBRARYS[@]}; do
  source ${LIBRARY_PATH}/${LIBRARY}.sh
done

FILENAME=""

function backupOriginalPhoto() {

  PATH_BACKUP="${HOME}/.config/mytermux/awesomeshot/backup"

  FILENAME_BACKUP="${1}"
  CHANGE_FILENAME=$( echo "${FILENAME_BACKUP}" | sed 's/.png/.backup.png/g' )

  if [ ! -d ${PATH_BACKUP} ]; then

    mkdir -p ${PATH_BACKUP}

    cp ${FILENAME} ${PATH_BACKUP}/${CHANGE_FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1

    if [ -f ${PATH_BACKUP}/${CHANGE_FILENAME} ]; then

      subtitle "[+]*Backup*File*"
      check

    else

      subtitle "[+]*Backup*File*"

      check
    
    fi

  else

    cp ${FILENAME} ${PATH_BACKUP}/${CHANGE_FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1

    if [ -f ${PATH_BACKUP}/${CHANGE_FILENAME} ]; then

      subtitle "[+]*Backup*File*"
      check

    else

      subtitle "[+]*Backup*File*"
      check
    
    fi

  fi

}

function rounded() {

  BORDER_RADIUS="15"

  subtitle "[+]*Set*Rounded*Corner*"

  convert ${FILENAME} \
    \( +clone -alpha extract -draw \
      "fill black polygon 0,0,0,${BORDER_RADIUS} ${BORDER_RADIUS},0 fill white circle ${BORDER_RADIUS},${BORDER_RADIUS},${BORDER_RADIUS},0" \
      \( +clone -flip \) -compose Multiply -composite \
      \( +clone -flop \) -compose Multiply -composite \
    \) \
    -alpha off -compose CopyOpacity -composite ${FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1
    check

}

function shadow() {

  SHADOW_COLOR="#000000"
  SHADOW_SIZE="80x10+0+10"

  subtitle "[+]*Set*Image*Shadow*"

  convert ${FILENAME} \
    \( \
      +clone \
      -background "${SHADOW_COLOR}" \
      -shadow ${SHADOW_SIZE} \
    \) \
    +swap \
    -background none \
    -layers merge \
    +repage ${FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1

  check

}

function border() {

  BORDER_COLOR="#FFFFFF" # Blue Sky: #A8D7FE
  BORDER_SIZE=70

  subtitle "[+]*Set*Image*Border*Color*"

  convert ${FILENAME} -bordercolor "${BORDER_COLOR}" -border ${BORDER_SIZE} ${FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1
  check

}

function footer() {

  FOOTER_TEXT="ï€° Shot by Awesomeshot"
  FOOTER_POSITION="South"
  FOOTER_XY="+0+30"
  FOOTER_FONT="JetBrains-Mono-Medium-Nerd-Font-Complete"
  FOOTER_FONT_SIZE="20"
  FOOTER_FOREGROUND_COLOR="#000000"
  FOOTER_BACKGROUND_COLOR="none"

  subtitle "[+]*Set*Image*Footer"

  echo -n "${FOOTER_TEXT}" |
  convert ${FILENAME} \
    -gravity ${FOOTER_POSITION} \
    -pointsize ${FOOTER_FONT_SIZE} \
    -fill ${FOOTER_FOREGROUND_COLOR} \
    -undercolor ${FOOTER_BACKGROUND_COLOR} \
    -font ${FOOTER_FONT} \
    -annotate ${FOOTER_XY} \
    @- ${FILENAME} >> ${LOG_PATH}/${LOG_FILE} 2>&1

  check

}


function header() {

    printf "\n\n                      %-18s\n\n" "AWESOMESHOT v${VERSION}"

}

function title() {

    printf "\n\b\r\033[2K***${1}\n" | sed 's/*/ /g'

}

function subtitle() {

  printf "%-45s" "*******${1}" | sed 's/ /./g' | sed 's/*/ /g'

}

function check() {

    if [[ $? -eq 0 && ${PIPESTATUS[0]} -eq 0 ]]; then

        echo -e " ${COLOR_SUCCESS}[SUCCESS]${COLOR_DEFAULT} "

    else

        echo -e " ${COLOR_DANGER}[FAILED]${COLOR_DEFAULT} "

    fi

}

function autorun() {

  PATH_DIRECTORY_WHEN_TAKE_SCREENSHOT="/sdcard/Pictures/Screenshots"

  COUNT=1

  clear

  header

  title "${COLOR_SKY}[?] WAITING TO TAKE SCREENSHOT${COLOR_BASED}             [${COLOR_WARNING}${COUNT}${COLOR_BASED}]"

  inotifywait -m -e create ${PATH_DIRECTORY_WHEN_TAKE_SCREENSHOT} 2> /dev/null | \

    while read GET_FILENAME_WHEN_TAKE_SCREENSHOT; do

      subtitle "[+]*Execute*Program*"

      GET_FILENAME=$(echo -e "${GET_FILENAME_WHEN_TAKE_SCREENSHOT}" | awk '{print $3}')
      FULL_PATH_FILENAME="${PATH_DIRECTORY_WHEN_TAKE_SCREENSHOT}/${GET_FILENAME}"
      FILENAME+="${FULL_PATH_FILENAME}"

      echo -e ""

      title "${COLOR_SKY}[+] BACKUP${COLOR_BASED}"

      backupOriginalPhoto ${GET_FILENAME}

      title "${COLOR_SKY}[+] CONVERTING${COLOR_BASED}"

      rounded
      shadow
      border
      footer

      termux-open ${FILENAME}

      COUNT=$(( ${COUNT} + 1 ))

      title "${COLOR_SKY}[?] WAITING TO TAKE SCREENSHOT${COLOR_BASED}             [${COLOR_WARNING}${COUNT}${COLOR_BASED}]"
      unset FILENAME

    done

}

function manualrun() {
 
  clear

  header

  title "${COLOR_SKY}[?] CHECKING FILE${COLOR_BASED}"

  subtitle "[+]*Set*Status*File*"

  if [ -f ${FILENAME} ]; then
  
    check

    title "${COLOR_SKY}[+] BACKUP${COLOR_BASED}"

    backupOriginalPhoto ${FILENAME}

    title "${COLOR_SKY}[+] CONVERTING${COLOR_BASED}"

    rounded
    shadow
    border
    footer
    echo -e ""
    setCursor on

    termux-open ${FILENAME}
    
  else

    stat "ERROR" "Danger" "\n\n    '${COLOR_DANGER}${FILENAME}${COLOR_BASED}' no such file!"
    setCursor on
    exit 1
    
  fi

}

PROGRAM_NAME="awesomeshot"
VERSION="0.2.0"
REPOSITORY_URL="https://github.com/xshin404/myTermux/blob/main/.local/bin/awesomeshot"
BUILD_DATE="Sunday, 25 July 2021"
LAST_UPDATE="Wednesday, 03 November 2021"

LOG_PATH="${HOME}/.config/mytermux/awesomeshot"
LOG_FILE="awesomeshot.log"

function programName() {

  echo -e "${PROGRAM_NAME}"

}

function version() {

  echo -e "${PROGRAM_NAME} ${VERSION}"

}

function buildDate() {

  echo -e "${BUILD_DATE}"

}

function lastUpdate() {

  echo -e "${LAST_UPDATE}"

}

function about() {

  echo -e "
Program Name    : ${PROGRAM_NAME}
Version         : ${VERSION}
Repository URL  : ${REPOSITORY_URL}
Build Date      : ${BUILD_DATE}
Last Update     : ${LAST_UPDATE}
  "

}

function help() {

  echo -e "
Usage:
  awesomeshot [options] [files...]

META OPTIONS:
  -h, --help              show list of command-line options
  -v, --version           show version of awesomeshot

RUN OPTIONS:
  -a, --auto              run awesomeshot with automatic while take screenshot
  -m, --manual            run awesomeshot with manual (${COLOR_WARNING}require filename${COLOR_BASED})
  -i, --info              show about program
  "

}


function main() {

  trap "handleInterruptByUser 'Interrupt By User'" 2

  setCursor off

  ${1} ${2}

}

case "${1}" in

  -a|--auto )

    main autorun

  ;;

  -i|--info )

    about

  ;;

  -m|--manual )

    if [ ${2} ]; then

      FILENAME+="${2}"
      main manualrun

    else

      stat "ERROR" "Danger" "Require file name"
      help
      exit 1

    fi

  ;;

  -h|--help )

    help

  ;;

  -v|--version )

    version

  ;;

  * )
    help
  ;;

esac