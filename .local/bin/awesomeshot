#!/usr/bin/env bash
#/data/data/com.termux/usr/bin/env bash

# Variable Color
COLOR_BASED="\e[39m"
COLOR_DANGER="\e[91m"
COLOR_WARNING="\e[93m"
COLOR_SUCCESS="\e[92m"

# Variable Information Awesomeshot
VERSION="0.0.1"
PROGRAM_NAME="awesomeshot"
REPOSITORY_URL="https://github.com/xshin404/awesomeshot"
BUILD_DATE="Sunday, 25 July 2021"

# Variable Imagemagick

## Imagemagick Color
BACKGROUND_COLOR="#545862"
SHADOW_SIZE="80x10+0+10"
SHADOW_COLOR="#000000"
BORDER_SIZE=70
BORDER_COLOR="#ABB2BF"

## Imagemagick Footer
FOOTER_POSITION="SouthWest"
FOOTER_XY="+320+40"
FOOTER_TEXT="ï€° Shot by Awesomeshot"
# Font PATH "/data/data/com.termux/files/usr/share/fonts/TTF/"
# See font available "magick convert -list font | grep -iE 'font:.*' " or "listfont" (listfont is alias from command magick convert ...)
FOOTER_FONT="JetBrains-Mono-Medium-Nerd-Font-Complete"
FOOTER_FONT_SIZE="20"
FOOTER_FOREGROUND_COLOR="#0E1419"
FOOTER_BACKGROUND_COLOR="none"

## Screeshot PATH
SCREENSHOT_PATH="/sdcard/Pictures/Screenshots"

## Log Message
LOG_SUCCESS="[${COLOR_SUCCESS}SUCCESS${COLOR_BASED}]"
LOG_FAILED="[${COLOR_DANGER}FAILED${COLOR_BASED}]"
LOG_DONE="[${COLOR_SUCCESS}DONE${COLOR_BASED}]"
LOG_OK="[${COLOR_SUCCESS}OK${COLOR_BASED}]"
LOG_ERROR="[${COLOR_DANGER}ERROR${COLOR_BASED}]"

# Function Log Date
function logdate() {
  echo -e "[${COLOR_WARNING}$(date +'%d-%m-%Y %r')${COLOR_BASED}] > $@"
}

# Function ERROR
function error() {
  echo -e "[${COLOR_DANGER}ERROR${COLOR_BASED}] > $@"
}

# Function Magick

## Function magickrounded
function magickrounded() {
  convert $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME \
    \( \
        +clone \
        -alpha extract -draw \
        'fill black polygon 0,0 0,20 20,0 fill white circle 20,20 20,0' \
        \( +clone -flip \) \
        -compose Multiply -composite \
        \( +clone -flop \) \
        -compose Multiply -composite \
    \) \
    -alpha off -compose CopyOpacity -composite $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME
}

## Function magickshadow
function magickshadow() {
  convert $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME \
    \( \
      +clone \
      -background "$SHADOW_COLOR" \
      -shadow $SHADOW_SIZE \
    \) \
    +swap \
    -background none \
    -layers merge \
    +repage $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME
}

## Function magickborder
function magickborder() {
  convert $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME -bordercolor "$BORDER_COLOR" -border $BORDER_SIZE $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME
}

## Function magickfooter
function magickfooter() {
  echo -n "$FOOTER_TEXT" |
  convert $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME \
  -gravity $FOOTER_POSITION \
  -pointsize $FOOTER_FONT_SIZE \
  -fill $FOOTER_FOREGROUND_COLOR \
  -undercolor $FOOTER_BACKGROUND_COLOR \
  -font $FOOTER_FONT \
  -annotate $FOOTER_XY \
  @- $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME
}

# Option Execute

## Function autoshot (with package inotify-tools)
function autoshot() {

  # if [ $(pwd) == ${SCREENSHOT_PATH} ]; then

    inotifywait -m -e create $SCREENSHOT_PATH | \
    while read FILENAME; do
      main
    done

  # else
  
  #   error "Make sure your working directory on ${SCREENSHOT_PATH}"
  
  # fi

}

function autoshotFooter() {
  inotifywait -m -e create $SCREENSHOT_PATH | \
  while read FILENAME; do
    main
    footer
  done
}

function magickexec() {

  if $($1); then
    logdate "$2 image ${LOG_SUCCESS} \n"
  else
    logdate "$2 image ${LOG_FAILED} \n"
  fi

}

function footer() {
  logdate "Add footer to image ..."
  magickexec "magickfooter" "Footer"
}

function main() {

  logdate "Execute awesomeshot"
  logdate "Searching newest file on working directory ..."
  SCREENSHOT_FILE_NAME_LENGHT=${#SCREENSHOT_FILE_NAME}
  if [ $(find $SCREENSHOT_PATH | sort -r | head | sed -n 1p | sed 's .\{29\}  ' 2> /dev/null) ]; then

    SCREENSHOT_FILE_NAME=$(find $SCREENSHOT_PATH | sort -r | head | sed -n 1p | sed 's .\{29\}  ')
    logdate "${SCREENSHOT_FILE_NAME} ${LOG_OK} \n"

    function execute() {
      logdate "Add rounded to image ..."
      magickexec "magickrounded" "Rounded"

      logdate "Add shadow to image ..."
      magickexec "magickshadow" "Shadow"

      logdate "Add border to image ..."
      magickexec "magickborder" "Border"

    }

    logdate "Backup original file ..."
    if [ ! -d $HOME/awesomeshot/ ]; then

      logdate "Creating directory $HOME/awesomeshot"

      if mkdir $HOME/awesomeshot; then

        logdate "Creating directory ${LOG_SUCCESS}"

      else

        logdate "Creating directory ${LOG_FAILED}"

      fi

      cp $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME $HOME/awesomeshot

      if [ -f $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ]; then

        logdate "Original file on $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ${LOG_SUCCESS} \n"
        execute

      else

        logdate "Original file on $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ${LOG_FAILED} \n"
        execute

      fi

    else

      cp $SCREENSHOT_PATH/$SCREENSHOT_FILE_NAME $HOME/awesomeshot

      if [ -f $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ]; then

        logdate "Original file on $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ${LOG_SUCCESS} \n"
        execute

      else

        logdate "Original file on $HOME/awesomeshot/$SCREENSHOT_FILE_NAME ${LOG_FAILED} \n"
        execute

      fi

    fi

    logdate "$SCREENSHOT_PATH/${SCREENSHOT_FILE_NAME} ${LOG_DONE} \n"

  else

    error "Can't get newest file on working directory"

  fi

}

## Function Information
function information() {
  echo -e "Program Name   : $PROGRAM_NAME"
  echo -e "Version        : v$VERSION"
  echo -e "Repository URL : $REPOSITORY_URL"
  echo -e "Build Date     : $BUILD_      logdate "$SCREENSHOT_PATH/${SCREENSHOT_FILE_NAME} ${LOG_DONE} \n"
DATE"
}

## Function Help
function help() {
  
  # Usage Help
  echo -e "Usage:
  awesomeshot [options] 
  "
  
  # Option Help
  echo -e "Options:
  -a        Automatic run awesomeshot
  -f        Run awesomeshot with footer text
  -h        Print this help message
  -i        Print information about this program
  -v        Print version information
  "
}

case $1 in

  "" )
    main
  ;;

  -a )
    autoshot
  ;;

  -f )
    main
    footer
  ;;

  -af )
    autoshotFooter
  ;;

  -h )
    help
  ;;

  -i )
    information
  ;;

  -v )
    echo -e "$PROGRAM_NAME v$VERSION"
  ;;

esac
